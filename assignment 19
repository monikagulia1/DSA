**Merge k Sorted Lists**
You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

import heapq

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    heap = []
    
    for i, lst in enumerate(lists):
        if lst:
            heapq.heappush(heap, (lst.val, i, lst))
    
    dummy = ListNode(0)
    curr = dummy
    

    while heap:
        _, index, node = heapq.heappop(heap)
        curr.next = node
        curr = curr.next
        
        if node.next:
            node.next.val = node.next.val
            heapq.heappush(heap, (node.next.val, index, node.next))
    
    return dummy.next


lists = [
    ListNode(1, ListNode(4, ListNode(5))),
    ListNode(1, ListNode(3, ListNode(4))),
    ListNode(2, ListNode(6))
]
merged_list = mergeKLists(lists)

while merged_list:
    print(merged_list.val, end=" ")
    merged_list = merged_list.next
1 1 2 3 4 4 5 6 
ğŸ’¡ 2. **Count of Smaller Numbers After Self**
Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].

Example 1:

Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are2 smaller elements (2 and 1).
To the right of 2 there is only1 smaller element (1).
To the right of 6 there is1 smaller element (1).
To the right of 1 there is0 smaller element.

def countSmaller(nums):
    def mergeSort(arr, start, end):
        if start >= end:
            return
        
        mid = (start + end) // 2
        mergeSort(arr, start, mid)
        mergeSort(arr, mid + 1, end)
        merge(arr, start, mid, end)
    
    def merge(arr, start, mid, end):
        temp = []
        count = 0
        i = start
        j = mid + 1
        
        while i <= mid and j <= end:
            if arr[i][0] > arr[j][0]:
                temp.append(arr[j])
                count += mid - i + 1
                j += 1
            else:
                temp.append(arr[i])
                i += 1
        
        while i <= mid:
            temp.append(arr[i])
            i += 1
        
        while j <= end:
            temp.append(arr[j])
            j += 1
        
        for k in range(len(temp)):
            arr[start + k] = temp[k]
        
        return count
    
    counts = [0] * len(nums)
    indexedNums = [(num, index) for index, num in enumerate(nums)]
    
    mergeSort(indexedNums, 0, len(indexedNums) - 1)
    
    for num, index in indexedNums:
        counts[index] = num
    
    return counts


nums = [5, 2, 6, 1]
result = countSmaller(nums)
print(result)
[5, 2, 6, 1]
ğŸ’¡ 3. **Sort an Array**
Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

Example 1:

Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).

def sortArray(nums):
    def mergeSort(arr):
        if len(arr) <= 1:
            return arr
        
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]
        
        left = mergeSort(left)
        right = mergeSort(right)
        
        return merge(left, right)
    
    def merge(left, right):
        merged = []
        i = 0
        j = 0
        
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                merged.append(left[i])
                i += 1
            else:
                merged.append(right[j])
                j += 1
        
        while i < len(left):
            merged.append(left[i])
            i += 1
        
        while j < len(right):
            merged.append(right[j])
            j += 1
        
        return merged
    
    return mergeSort(nums)


nums = [5, 2, 3, 1]
result = sortArray(nums)
print(result)
[1, 2, 3, 5]
ğŸ’¡ 4. **Move all zeroes to end of array**
Given an array of random numbers, Push all the zeroâ€™s of a given array to the end of the array. For example, if the given arrays is {1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0}, it should be changed to {1, 9, 8, 4, 2, 7, 6, 0, 0, 0, 0}. The order of all other elements should be same. Expected time complexity is O(n) and extra space is O(1).

Example:

Input :  arr[] = {1, 2, 0, 4, 3, 0, 5, 0};
Output : arr[] = {1, 2, 4, 3, 5, 0, 0, 0};

Input : arr[]  = {1, 2, 0, 0, 0, 3, 6};
Output : arr[] = {1, 2, 3, 6, 0, 0, 0};
def moveZeroes(nums):
    left = 0
    right = 0
    
    while right < len(nums):
        if nums[right] != 0:
            nums[left] = nums[right]
            left += 1
        right += 1
    
    while left < len(nums):
        nums[left] = 0
        left += 1
    
    return nums


arr = [1, 2, 0, 4, 3, 0, 5, 0]
result = moveZeroes(arr)
print(result)
[1, 2, 4, 3, 5, 0, 0, 0]
ğŸ’¡ 5. **Rearrange array in alternating positive & negative items with O(1) extra space**
Given an array of positive and negative numbers, arrange them in an alternate fashion such that every positive number is followed by a negative and vice-versa maintaining the order of appearance. The number of positive and negative numbers need not be equal. If there are more positive numbers they appear at the end of the array. If there are more negative numbers, they too appear at the end of the array.

Examples:

Input:  arr[] = {1, 2, 3, -4, -1, 4}

Output: arr[] = {-4, 1, -1, 2, 3, 4}

Input:  arr[] = {-5, -2, 5, 2, 4, 7, 1, 8, 0, -8} Output: arr[] = {-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}

def rearrangeArray(arr):
    left = 0
    right = 1
    n = len(arr)
    
  
    while left < n and right < n:
        if (arr[left] >= 0 and arr[right] < 0) or (arr[left] < 0 and arr[right] >= 0):
            left += 2
            right += 2
        elif arr[left] >= 0:
            right += 2
        else:
            left += 2
    
  
    while left < n and right < n:
        arr[left], arr[right] = arr[right], arr[left]
        left += 2
        right += 2
    
    return arr


arr = [1, 2, 3, -4, -1, 4]
result = rearrangeArray(arr)
print(result)
[1, 2, 3, -4, -1, 4]
ğŸ’¡ **6. Merge two sorted arrays**
Given two sorted arrays, the task is to merge them in a sorted manner.

Examples:

Input: arr1[] = { 1, 3, 4, 5}, arr2[] = {2, 4, 6, 8}

Output: arr3[] = {1, 2, 3, 4, 4, 5, 6, 8}

Input: arr1[] = { 5, 8, 9}, arr2[] = {4, 7, 8} Output: arr3[] = {4, 5, 7, 8, 8, 9}

def mergeArrays(arr1, arr2):
    n1 = len(arr1)
    n2 = len(arr2)
    merged = [0] * (n1 + n2)
    
    i = 0
    j = 0
    k = 0
    
    while i < n1 and j < n2:
        if arr1[i] <= arr2[j]:
            merged[k] = arr1[i]
            i += 1
        else:
            merged[k] = arr2[j]
            j += 1
        k += 1
    
    while i < n1:
        merged[k] = arr1[i]
        i += 1
        k += 1
    
    while j < n2:
        merged[k] = arr2[j]
        j += 1
        k += 1
    
    return merged


arr1 = [1, 3, 4, 5]
arr2 = [2, 4, 6, 8]
result = mergeArrays(arr1, arr2)
print(result)
[1, 2, 3, 4, 4, 5, 6, 8]
ğŸ’¡ 7. **Intersection of Two Arrays**
Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]

def intersection(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)
    intersection_set = set1.intersection(set2)
    intersection_list = list(intersection_set)
    return intersection_list


nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
result = intersection(nums1, nums2)
print(result)
[2]
ğŸ’¡ 8. **Intersection of Two Arrays II**
Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]

def intersect(nums1, nums2):
    count = {}
    intersection = []
    
    for num in nums1:
        count[num] = count.get(num, 0) + 1
    
    for num in nums2:
        if num in count and count[num] > 0:
            intersection.append(num)
            count[num] -= 1
    
    return intersection

nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
result = intersect(nums1, nums2)
print(result)
[2, 2]
