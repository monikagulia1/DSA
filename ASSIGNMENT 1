ques1. Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

**Example:**
Input: nums = [2,7,11,15], target = 9
Output0 [0,1]

**Explanation:** Because nums[0] + nums[1] == 9, we return [0, 1][


solution1. To solve this problem, you can use a hashmap to store the elements of the array along with their indices. Then, iterate through the array and for each element, check if the complement (target minus the current element) exists in the hashmap. If it does, you have found the two numbers that add up to the target.

Here's the implementation in Python:

def twoSum(nums, target):
    num_map = {}  # hashmap to store elements and their indices

    for i, num in enumerate(nums):
        complement = target - num

        if complement in num_map:
            return [num_map[complement], i]

        num_map[num] = i

    return []  # if no solution found

# Example usage
nums = [2, 7, 11, 15]
target = 9
result = twoSum(nums, target)
print(result)  # Output: [0, 1]
In this example, the time complexity of the solution is O(n) because we iterate through the array once, and the space complexity is O(n) as well due to the hashmap storing at most n elements.


ques2. Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.

Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:

- Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
- Return k.

**Example :**
Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_*,_*]

solution2.
To solve this problem, you can use a two-pointer approach. Initialize two pointers, i and j, where i is the slow-runner and j is the fast-runner. Iterate through the array using the fast-runner j and perform the following steps:

If nums[j] is equal to val, move the fast-runner j to the next element.
If nums[j] is not equal to val, assign nums[j] to nums[i], increment both i and j by 1.
Continue these steps until the fast-runner j reaches the end of the array. Finally, the value of i will represent the number of elements in nums that are not equal to val.

Here's the implementation of the algorithm in Python:

def removeElement(nums, val):
    i = 0
    for j in range(len(nums)):
        if nums[j] != val:
            nums[i] = nums[j]
            i += 1
    return i
Using the example given:
nums = [3, 2, 2, 3]
val = 3
result = removeElement(nums, val)
print(result)  # Output: 2
print(nums)    # Output: [2, 2, _, _]
Note: In the resulting array nums, the elements denoted by _ are not important, as mentioned in the problem statement. Only the first k elements of nums contain the elements that are not equal to val, where k is the returned value.

question3.
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

**Example 1:**
Input: nums = [1,3,5,6], targ

solution3.
To solve this problem with a logarithmic runtime complexity of O(log n), we can use a binary search algorithm. Here's the algorithm to find the index of the target value or the position where it would be inserted:

Initialize two pointers, left and right, pointing to the start and end of the array, respectively.
While left <= right, do the following:
Calculate the middle index as mid = (left + right) // 2.
If nums[mid] is equal to the target, return mid.
If nums[mid] is greater than the target, update right = mid - 1 (to search in the left half of the array).
If nums[mid] is less than the target, update left = mid + 1 (to search in the right half of the array).
If the loop terminates without finding the target, return left (the index where the target would be inserted).
Now, let's apply this algorithm to the given example:

def searchInsert(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = (left + right) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return left

# Example usage:
nums = [1, 3, 5, 6]
target = 5
result = searchInsert(nums, target)
print(result)
Output:
2
In this case, the target value 5 is found at index 2 in the given sorted array [1, 3, 5, 6].

question4.
You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

**Example 1:**
Input: digits = [1,2,3]
Output: [1,2,4]

solution4.

To increment a large integer represented as an integer array, you can follow these steps:

Start from the least significant digit (rightmost digit) and initialize a carry variable to 1.
Traverse the array from right to left.
For each digit, add the carry to it.
If the sum is less than 10, update the digit with the sum and set the carry to 0 since there is no carry-over.
If the sum is 10 or greater, update the digit with the remainder of the sum divided by 10 (the rightmost digit) and set the carry to 1 (carry-over).
Continue the traversal until you reach the most significant digit or the carry becomes 0.
If the carry is still 1 after the traversal, it means the most significant digit was 9, and it became 10. In this case, insert 1 at the beginning of the array to accommodate the additional digit.
Return the updated array.
Here's the implementation of the above steps in Python:

def increment_digits(digits):
    carry = 1
    for i in range(len(digits) - 1, -1, -1):
        digits[i] += carry
        if digits[i] < 10:
            carry = 0
            break
        else:
            digits[i] %= 10

    if carry == 1:
        digits.insert(0, 1)

    return digits
Using the given example, digits = [1, 2, 3], let's test the function:

digits = [1, 2, 3]
result = increment_digits(digits)
print(result)  # Output: [1, 2, 4]
The function will output [1, 2, 4], which is the incremented value of the large integer [1, 2, 3].

 question5.

 You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

**Example 1:**
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]

solution5.
To merge the two sorted arrays nums1 and nums2 into nums1, we can use the following approach:

Initialize three pointers: p1 to the last non-zero element in nums1 (at index m - 1), p2 to the last element in nums2 (at index n - 1), and p to the last index of nums1 (at index m + n - 1).

Compare the elements at nums1[p1] and nums2[p2], and store the larger element at nums1[p]. Decrement the corresponding pointer (p1 or p2) and p by 1.

Repeat step 2 until all elements from nums1 and nums2 have been merged.

If there are any remaining elements in nums2, copy them to the beginning of nums1 since they are already sorted.

Here's the implementation of the above approach in Python:

def merge(nums1, m, nums2, n):
    p1 = m - 1
    p2 = n - 1
    p = m + n - 1

    while p1 >= 0 and p2 >= 0:
        if nums1[p1] > nums2[p2]:
            nums1[p] = nums1[p1]
            p1 -= 1
        else:
            nums1[p] = nums2[p2]
            p2 -= 1
        p -= 1

    # Copy remaining elements from nums2 to nums1
    nums1[:p2 + 1] = nums2[:p2 + 1]
Using the given example:
nums1 = [1, 2, 3, 0, 0, 0]
m = 3
nums2 = [2, 5, 6]
n = 3

merge(nums1, m, nums2, n)
print(nums1)  # Output: [1, 2, 2, 3, 5, 6]
After merging nums1 and nums2, the resulting sorted array will be stored in nums1, and the expected output is [1, 2, 2, 3, 5, 6].

question6.
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

**Example 1:**
Input: nums = [1,2,3,1]

Output: true
solution6.
To determine if any value appears at least twice in the given integer array nums, you can use a simple algorithm that checks for duplicate elements. Here's an example solution in Python:
def containsDuplicate(nums):
    seen = set()
    for num in nums:
        if num in seen:
            return True
        seen.add(num)
    return False

# Example usage:
nums = [1, 2, 3, 1]
print(containsDuplicate(nums))  # Output: True
In this solution, we use a set called seen to keep track of the unique elements we have encountered so far. We iterate through each element in nums and check if it is already present in the seen set. If it is, we know that it is a duplicate and return True. Otherwise, we add it to the seen set. If we finish iterating through all elements without finding any duplicates, we return False.

The example usage demonstrates how to call the containsDuplicate function with the given input nums and prints the expected output True.

question7.
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the nonzero elements.

Note that you must do this in-place without making a copy of the array.

**Example 1:**
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

solution7.
To move all zeros to the end of the array while maintaining the relative order of the nonzero elements, you can use a two-pointer approach. Here's a step-by-step algorithm to achieve this in-place:

Initialize two pointers, left and right, both starting from the beginning of the array (left = 0 and right = 0).
Iterate through the array using the right pointer, while right is less than the length of the array:
If the element at the right pointer is non-zero:
Swap the element at the left pointer with the element at the right pointer.
Increment both left and right pointers by 1.
If the element at the right pointer is zero, only increment the right pointer by 1.
After iterating through the entire array, all non-zero elements will be shifted to the left side of the array, and all zeros will remain at the end.
Iterate from the current left pointer position until the end of the array, setting each element to zero.
Here's the implementation of the above algorithm in Python:
def moveZeroes(nums):
    left = 0
    right = 0

    while right < len(nums):
        if nums[right] != 0:
            nums[left], nums[right] = nums[right], nums[left]
            left += 1
        right += 1

    while left < len(nums):
        nums[left] = 0
        left += 1

    return nums
Using the example input nums = [0, 1, 0, 3, 12], if you call the moveZeroes function with this input, it will return [1, 3, 12, 0, 0], which is the desired output.

question8.
 You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.

You are given an integer array nums representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.

**Example 1:**
Input: nums = [1,2,2,4]
Output: [2,3]
solution8.
To solve this problem, we can use a combination of mathematical calculations and iteration through the given array.

Here's the step-by-step approach to find the duplicate number and missing number in the array:

Calculate the expected sum, which is the sum of all numbers from 1 to n, using the formula: expectedSum = n * (n + 1) / 2.
Calculate the actual sum of the given array, using the sum() function.
Find the duplicate number and missing number by subtracting the actual sum from the expected sum. Let's call the missing number "x" and the duplicate number "y".
Let diff = expectedSum - actualSum
Initialize two variables, duplicate and missing, to 0.
Iterate through each number num in the array:
Update duplicate = num if it appears more than once.
Update missing = num if num + diff equals to any number in the array.
Return the result as an array [duplicate, missing].
Here's the implementation in Python:
def findErrorNums(nums):
    n = len(nums)
    expectedSum = n * (n + 1) // 2
    actualSum = sum(nums)

    diff = expectedSum - actualSum
    duplicate = missing = 0

    for num in nums:
        if nums.count(num) > 1:
            duplicate = num
        if num + diff in nums:
            missing = num + diff

    return [duplicate, missing]
Using the given example:
nums = [1, 2, 2, 4]
result = findErrorNums(nums)
print(result)  # Output: [2, 3]
The function will return [2, 3], indicating that 2 is the duplicate number, and 3 is the missing number in the array.
