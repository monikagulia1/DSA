Assignment Questions 14
ðŸ’¡ **Question 1**
Given a linked list of N nodes such that it may contain a loop.

A loop here means that the last node of the link list is connected to the node at position X(1-based index). If the link list does not have any loop, X=0.

Remove the loop from the linked list, if it is present, i.e. unlink the last node which is forming the loop.

Example 1:

Input:
N = 3
value[] = {1,3,4}
X = 2
Output:1
Explanation:The link list looks like
1 -> 3 -> 4
     ^    |
     |____|
A loop is present. If you remove it
successfully, the answer will be 1.

class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None


def detect_and_remove_loop(head):
    if head is None or head.next is None:
        return head

    slow = head
    fast = head

   
    while fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            break

   
    if slow != fast:
        return head

  
    slow = head

    
    prev = None
    while slow.next != fast.next:
        prev = fast
        slow = slow.next
        fast = fast.next

    
    fast.next = None

    return head



def create_linked_list(arr):
    if not arr:
        return None
    head = Node(arr[0])
    current = head
    for i in range(1, len(arr)):
        current.next = Node(arr[i])
        current = current.next
    return head



def print_linked_list(head):
    current = head
    while current is not None:
        print(current.data, end=" ")
        current = current.next
    print()



if __name__ == '__main__':
   
    arr = [1, 2, 3, 4]
    head = create_linked_list(arr)

    x = 1
    tail = head
    count = 1
    while count < x:
        tail = tail.next
        count += 1
    tail.next = head  

    
    head = detect_and_remove_loop(head)

  
    print_linked_list(head)
1 
ðŸ’¡ **Question 2**
A number N is represented in Linked List such that each digit corresponds to a node in linked list. You need to add 1 to it.

Example 1:

Input:
LinkedList: 4->5->6
Output:457

class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None


def reverse_linked_list(head):
    prev = None
    current = head
    while current is not None:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
    return prev


def add_one_to_linked_list(head):
    reversed_head = reverse_linked_list(head)

    current = reversed_head
    carry = 1

    while current is not None:
        digit_sum = current.data + carry

       
        current.data = digit_sum % 10
        carry = digit_sum // 10

        current = current.next

    
    if carry:
        new_node = Node(1)
        current.next = new_node

    head = reverse_linked_list(reversed_head)

    return head


def print_linked_list(head):
    current = head
    while current is not None:
        print(current.data, end="")
        current = current.next
    print()



if __name__ == '__main__':

    head = Node(4)
    head.next = Node(5)
    head.next.next = Node(6)

    # Add 1 to the linked list
    head = add_one_to_linked_list(head)

    # Print the result
    print_linked_list(head)
457
ðŸ’¡ **Question 3**
Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:(i) a next pointer to the next node,(ii) a bottom pointer to a linked list where this node is head.Each of the sub-linked-list is in sorted order.Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. Note: The flattened list will be printed using the bottom pointer instead of next pointer.

Example 1:

Input:
5 -> 10 -> 19 -> 28
|     |     |     |
7     20    22   35
|           |     |
8          50    40
|                 |
30               45
Output: 5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every
node in a single level.(Note:| represents the bottom pointer.)

class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None
        self.bottom = None


def merge_lists(a, b):
    dummy = Node()
    tail = dummy

    while a is not None and b is not None:
        if a.data < b.data:
            tail.bottom = a
            a = a.bottom
        else:
            tail.bottom = b
            b = b.bottom
        tail = tail.bottom

    if a is not None:
        tail.bottom = a
    else:
        tail.bottom = b

    return dummy.bottom


def flatten(head):
    if head is None or head.next is None:
        return head

    
    head.next = flatten(head.next)


    head = merge_lists(head, head.next)

    return head


def print_flattened_list(head):
    current = head
    while current is not None:
        print(current.data, end=" ")
        current = current.bottom
    print()


if __name__ == '__main__':
    
    head = Node(5)
    head.next = Node(10)
    head.next.next = Node(19)
    head.next.next.next = Node(28)

    head.bottom = Node(7)
    head.bottom.bottom = Node(8)
    head.bottom.bottom.bottom = Node(30)

    head.next.bottom = Node(20)

    head.next.next.bottom = Node(22)
    head.next.next.next.bottom = Node(35)

    head.bottom.bottom.next = Node(50)

    head.next.next.bottom.bottom = Node(40)
    head.next.next.bottom.bottom.bottom = Node(45)

    # Flatten the linked list
    head = flatten(head)

    # Print the flattened list
    print_flattened_list(head)
5 7 8 10 19 20 22 28 30 35 40 45 
ðŸ’¡ **Question 4**
You are given a special linked list with N nodes where each node has a next pointer pointing to its next node. You are also given M random pointers, where you will be given M number of pairs denoting two nodes a and b  i.e. a->arb = b (arb is pointer to random node).

Construct a copy of the given list. The copy should consist of exactly N new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes X and Y in the original list, where X.arb --> Y, then for the corresponding two nodes x and y in the copied list, x.arb --> y.

Return the head of the copied linked list.

Note :- The diagram isn't part of any example, it just depicts an example of how the linked list may look like.

Example 1:

Input:
N = 4, M = 2
value = {1,2,3,4}
pairs = {{1,2},{2,4}}
Output:1
Explanation:In this test case, there
are 4 nodes in linked list.  Among these
4 nodes,  2 nodes have arbitrary pointer
set, rest two nodes have arbitrary pointer
as NULL. Second line tells us the value
of four nodes. The third line gives the
information about arbitrary pointers.
The first node arbitrary pointer is set to
node 2.  The second node arbitrary pointer
is set to node 4.

class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None
        self.random = None


def copy_random_list(head):
    if head is None:
        return None

  
    current = head
    while current is not None:
        new_node = Node(current.data)
        new_node.next = current.next
        current.next = new_node
        current = new_node.next

    
    current = head
    while current is not None:
        if current.random is not None:
            current.next.random = current.random.next
        current = current.next.next

   
    new_head = head.next
    current = head
    while current is not None:
        new_node = current.next
        current.next = new_node.next
        if new_node.next is not None:
            new_node.next = new_node.next.next
        current = current.next

    return new_head


def print_list(head):
    current = head
    while current is not None:
        random_data = current.random.data if current.random else None
        print(f"Data: {current.data}, Random: {random_data}")
        current = current.next



if __name__ == "__main__":
    
    head = Node(1)
    node2 = Node(2)
    node3 = Node(3)
    node4 = Node(4)
    node5 = Node(5)

    head.next = node2
    head.random = node3

    node2.next = node3
    node2.random = head

    node3.next = node4
    node3.random = node5

    node4.next = node5
    node4.random = node2

    node5.random = head

   
    new_head = copy_random_list(head)

    
    print_list(new_head)
Data: 1, Random: 3
Data: 2, Random: 1
Data: 3, Random: 5
Data: 4, Random: 2
Data: 5, Random: 1
ðŸ’¡ **Question 5**
Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problem in O(1) extra space complexity and O(n) time complexity.

Example 1:

Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def oddEvenList(head):
    if not head or not head.next:
        return head

    oddHead = head
    evenHead = head.next
    oddTail = oddHead
    evenTail = evenHead

    current = evenHead.next
    index = 3 

    while current:
        if index % 2 == 1:  
            oddTail.next = current
            oddTail = oddTail.next
        else:  # Even index
            evenTail.next = current
            evenTail = evenTail.next

        current = current.next
        index += 1

    oddTail.next = evenHead
    evenTail.next = None

    return oddHead


head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)


reordered = oddEvenList(head)


current = reordered
while current:
    print(current.val, end=" ")
    current = current.next
1 3 5 2 4 
ðŸ’¡ **Question 6**
Given a singly linked list of size N. The task is to left-shift the linked list by k nodes, where k is a given positive integer smaller than or equal to length of the linked list.

Example 1:

Input:
N = 5
value[] = {2, 4, 7, 8, 9}
k = 3
Output:8 9 2 4 7
Explanation:Rotate 1:4 -> 7 -> 8 -> 9 -> 2
Rotate 2: 7 -> 8 -> 9 -> 2 -> 4
Rotate 3: 8 -> 9 -> 2 -> 4 -> 7

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def leftShiftLinkedList(head, k):
    if not head or not head.next or k == 0:
        return head

    current = head
    for _ in range(k-1):
        if not current.next:
            break
        current = current.next

    if not current.next:
        return head

    new_head = current.next
    last_node = current

    while current.next:
        current = current.next

    current.next = head

    last_node.next = None

    return new_head


head = ListNode(2)
head.next = ListNode(4)
head.next.next = ListNode(7)
head.next.next.next = ListNode(8)
head.next.next.next.next = ListNode(9)


k = 3
shifted = leftShiftLinkedList(head, k)


current = shifted
while current:
    print(current.val, end=" ")
    current = current.next
8 9 2 4 7 
ðŸ’¡ **Question 7**
You are given the head of a linked list with n nodes.

For each node in the list, find the value of the next greater node. That is, for each node, find the value of the first node that is next to it and has a strictly larger value than it.

Return an integer array answer where answer[i] is the value of the next greater node of the ith node (1-indexed). If the ith node does not have a next greater node, set answer[i] = 0.

Example 1:

Input: head = [2,1,5]
Output: [5,5,0]

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def nextLargerNodes(head):
    lst = []
    while head:
        lst.append(head.val)
        head = head.next

    n = len(lst)
    stack = []
    result = [0] * n

    for i in range(n-1, -1, -1):
        while stack and lst[i] >= stack[-1]:
            stack.pop()

        if stack:
            result[i] = stack[-1]

        stack.append(lst[i])

    return result


head = ListNode(2)
head.next = ListNode(1)
head.next.next = ListNode(5)


result = nextLargerNodes(head)


print(result)
[5, 5, 0]
ðŸ’¡ **Question 8**
Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.

After doing so, return the head of the final linked list.  You may return any such answer.

(Note that in the examples below, all sequences are serializations of ListNode objects.)

Example 1:

Input: head = [1,2,-3,3,1]
Output: [3,1]
Note: The answer [1,2,1] would also be accepted.

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def removeZeroSumSublists(head):
    
    dummy = ListNode(0)
    dummy.next = head

    cumulative_sums = {}
    current_sum = 0
    node = dummy

    while node:
        current_sum += node.val

        if current_sum in cumulative_sums:
            prev = cumulative_sums[current_sum].next
            prev_sum = current_sum + prev.val
            while prev_sum != current_sum:
                del cumulative_sums[prev_sum]
                prev = prev.next
                prev_sum += prev.val
            cumulative_sums[current_sum].next = node.next
        else:
            cumulative_sums[current_sum] = node

        node = node.next

    return dummy.next


head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(-3)
head.next.next.next = ListNode(3)
head.next.next.next.next = ListNode(1)

result = removeZeroSumSublists(head)


while result:
    print(result.val, end=" ")
    result = result.next
3 1 
