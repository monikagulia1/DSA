Ques-1 Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

def merge_intervals(intervals):
    if not intervals:
        return []

    intervals.sort(key=lambda x: x[0])

    result = [intervals[0]]

    for interval in intervals[1:]:
        if interval[0] <= result[-1][1]:
            result[-1][1] = max(result[-1][1], interval[1])
        else:
            result.append(interval)

    return result

intervals = [[1,3],[2,6],[8,10],[15,18]]
merged_intervals = merge_intervals(intervals)
print(merged_intervals)
[[1, 6], [8, 10], [15, 18]]
Ques 2 Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

def sortColors(nums):
    low = 0  
    mid = 0  
    high = len(nums) - 1 

    while mid <= high:
        if nums[mid] == 0:
            
            nums[mid], nums[low] = nums[low], nums[mid]
            low += 1
            mid += 1
        elif nums[mid] == 1:
           
            mid += 1
        else:  
           
            nums[mid], nums[high] = nums[high], nums[mid]
            high -= 1

    return nums

nums = [2, 0, 2, 1, 1, 0]
sorted_nums = sortColors(nums)
print(sorted_nums)
[0, 0, 1, 1, 2, 2]
Ques 3: You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

Example 1:

Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version.

def firstBadVersion(n):
    left = 1
    right = n

    while left < right:
        mid = left + (right - left) // 2

        if isBadVersion(mid):
            right = mid
        else:
            left = mid + 1

    return left


def isBadVersion(mid):
    bad_version = 4
    if mid >= bad_version:
        return True
    return False


n = 5

first_bad = firstBadVersion(n)
print(first_bad)
4
ðŸ’¡ 4. **Maximum Gap**
Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.

You must write an algorithm that runs in linear time and uses linear extra space.

Example 1:

Input: nums = [3,6,9,1]
Output: 3
Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.

def maximumGap(nums):
    if len(nums) < 2:
        return 0
    
    max_num = max(nums)

    exp = 1  
    n = len(nums)
    output = [0] * n

    while max_num // exp > 0:
        count = [0] * 10 

        
        for num in nums:
            digit = (num // exp) % 10
            count[digit] += 1

       
        for i in range(1, 10):
            count[i] += count[i - 1]

        
        for i in range(n - 1, -1, -1):
            num = nums[i]
            digit = (num // exp) % 10
            output[count[digit] - 1] = num
            count[digit] -= 1

       
        nums = output[:]

        
        exp *= 10

    
    max_diff = 0
    for i in range(1, n):
        max_diff = max(max_diff, nums[i] - nums[i - 1])

    return max_diff

nums = [3, 6, 9, 1]
max_diff = maximumGap(nums)
print(max_diff)
3
ðŸ’¡ 5. **Contains Duplicate**
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

Example 1:

Input: nums = [1,2,3,1]
Output: true

def containsDuplicate(nums):
    num_set = set()

    for num in nums:
        if num in num_set:
            return True
        else:
            num_set.add(num)

    return False

nums = [1, 2, 3, 1]
has_duplicate = containsDuplicate(nums)
print(has_duplicate)
True
ðŸ’¡ 6. **Minimum Number of Arrows to Burst Balloons**
There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.

Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

Example 1:

Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].

def findMinArrowShots(points):
    if not points:
        return 0

    points.sort(key=lambda x: x[1])

    arrows = 1 
    prev_end = points[0][1]

    
    for i in range(1, len(points)):
        curr_start, curr_end = points[i]

        
        if curr_start > prev_end:
            arrows += 1
            prev_end = curr_end

    return arrows

points = [[10, 16], [2, 8], [1, 6], [7, 12]]
min_arrows = findMinArrowShots(points)
print(min_arrows)
2
ðŸ’¡ 7. **Longest Increasing Subsequence**
Given an integer array nums, return the length of the longest strictly increasing**

*subsequence*

.

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

def lengthOfLIS(nums):
    if not nums:
        return 0

    n = len(nums)
    dp = [1] * n  

    for i in range(1, n):
        
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)

nums = [10, 9, 2, 5, 3, 7, 101, 18]
length = lengthOfLIS(nums)
print(length)
4
ðŸ’¡ 8. **132 Pattern**
Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.

Example 1:

Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.

def find132pattern(nums):
    stack = []
    third = float('-inf')

    for i in range(len(nums) - 1, -1, -1):
        if nums[i] < third:
            return True
        else:
            while stack and nums[i] > stack[-1]:
                third = stack.pop()
            
            stack.append(nums[i])

    return False

nums = [1, 2, 3, 4]
has_132_pattern = find132pattern(nums)
print(has_132_pattern)
False
