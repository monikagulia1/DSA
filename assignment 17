ðŸ’¡ **Question 1**
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

Example 1:

Input: s = "leetcode"
Output: 0

def firstUniqChar(s):
    char_freq = {}

   
    for char in s:
        char_freq[char] = char_freq.get(char, 0) + 1

   
    for i in range(len(s)):
        if char_freq[s[i]] == 1:
            return i

    return -1



s = "loveleetcode"
result = firstUniqChar(s)
print("First non-repeating character index:", result)
First non-repeating character index: 2
ðŸ’¡ **Question 2**
Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.

A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].

A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

Example 1:

Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.

def maxSubarraySumCircular(nums):
    def kadane(nums):
        max_sum = float('-inf')
        curr_sum = 0
        
        for num in nums:
            curr_sum = max(num, curr_sum + num)
            max_sum = max(max_sum, curr_sum)
        
        return max_sum
    
    max_sum_non_circular = kadane(nums)
    
    total_sum = sum(nums)
    inverted_nums = [-num for num in nums]
    max_sum_circular = total_sum + kadane(inverted_nums)
    
    return max(max_sum_non_circular, max_sum_circular) if max_sum_circular != 0 else max_sum_non_circular

nums = [1, -2, 3, -2]
result = maxSubarraySumCircular(nums)
print("Maximum possible sum of a non-empty subarray:", result)
Maximum possible sum of a non-empty subarray: 3
ðŸ’¡ **Question 3**
The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.

The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:

If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.
Otherwise, they will leave it and go to the queue's end.
This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arrays students and sandwiches where sandwiches[i] is the type of the ith sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the jth student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.

Example 1:

Input: students = [1,1,0,0], sandwiches = [0,1,0,1]
Output: 0
Explanation:
- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].
- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].
- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].
- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].
- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].
Hence all students are able to eat.

def countStudents(students, sandwiches):
    n = len(students)

    while i < n:
        if students[i] == sandwiches[0]:
            sandwiches.pop(0)
        else:
            students.append(students[i])
            count += 1
        
        i += 1
        
        if count == n:
            break

    return n - len(sandwiches)

students = [1,1,1,0,0,1]
sandwiches =  [1,0,0,0,1,1]
result = countStudents(students, sandwiches)
print("Number of students unable to eat:", result)
---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)
Cell In[36], line 20
     18 students = [1,1,1,0,0,1]
     19 sandwiches =  [1,0,0,0,1,1]
---> 20 result = countStudents(students, sandwiches)
     21 print("Number of students unable to eat:", result)

Cell In[36], line 4, in countStudents(students, sandwiches)
      1 def countStudents(students, sandwiches):
      2     n = len(students)
----> 4     while i < n:
      5         if students[i] == sandwiches[0]:
      6             sandwiches.pop(0)

UnboundLocalError: local variable 'i' referenced before assignment
ðŸ’¡ **Question 4**
You have a RecentCounter class which counts the number of recent requests within a certain time frame.

Implement the RecentCounter class:

RecentCounter() Initializes the counter with zero recent requests.
int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].
It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.

Example 1:

Input
["RecentCounter", "ping", "ping", "ping", "ping"]
[[], [1], [100], [3001], [3002]]
Output
[null, 1, 2, 3, 3]

Explanation
RecentCounter recentCounter = new RecentCounter();
recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1
recentCounter.ping(100);   // requests = [1,100], range is [-2900,100], return 2
recentCounter.ping(3001);  // requests = [1,100,3001], range is [1,3001], return 3
recentCounter.ping(3002);  // requests = [1,100,3001,3002], range is [2,3002], return 3
class RecentCounter:
    def __init__(self):
        self.requests = []

    def ping(self, t: int) -> int:
        self.requests.append(t)
        left_boundary = t - 3000
        
        while self.requests and self.requests[0] < left_boundary:
            self.requests.pop(0)
        
        return len(self.requests)
recentCounter = RecentCounter()
output = []
output.append(None)  
output.append(recentCounter.ping(1))    
output.append(recentCounter.ping(100))   
output.append(recentCounter.ping(3001))  
output.append(recentCounter.ping(3002))  

print(output)
[None, 1, 2, 3, 3]
ðŸ’¡ **Question 5**
There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.

The rules of the game are as follows:

Start at the 1st friend.
Count the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.
The last friend you counted leaves the circle and loses the game.
If there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.
Else, the last friend in the circle wins the game.
Given the number of friends, n, and an integer k, return the winner of the game.

Example 1:

Input: n = 5, k = 2
Output: 3
Explanation: Here are the steps of the game:
1) Start at friend 1.
2) Count 2 friends clockwise, which are friends 1 and 2.
3) Friend 2 leaves the circle. Next start is friend 3.
4) Count 2 friends clockwise, which are friends 3 and 4.
5) Friend 4 leaves the circle. Next start is friend 5.
6) Count 2 friends clockwise, which are friends 5 and 1.
7) Friend 1 leaves the circle. Next start is friend 3.
8) Count 2 friends clockwise, which are friends 3 and 5.
9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.
def findTheWinner(n: int, k: int) -> int:
    circle = list(range(1, n + 1))
    current = 0  

    while len(circle) > 1:
        current = (current + k - 1) % len(circle)
        circle.pop(current)

    return circle[0] 
n = 6
k = 5
winner = findTheWinner(n, k)
print(winner)
1
ðŸ’¡ **Question 6**
You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i].

You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.

You will do the following steps repeatedly until all cards are revealed:

Take the top card of the deck, reveal it, and take it out of the deck.
If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.
If there are still unrevealed cards, go back to step 1. Otherwise, stop.
Return an ordering of the deck that would reveal the cards in increasing order.

Note that the first entry in the answer is considered to be the top of the deck.

Example 1:

Input: deck = [17,13,11,2,3,5,7]
Output: [2,13,3,11,5,17,7]
Explanation:
We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.
After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.
We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].
We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].
We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].
We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].
We reveal 11, and move 17 to the bottom.  The deck is now [13,17].
We reveal 13, and move 17 to the bottom.  The deck is now [17].
We reveal 17.
Since all the cards revealed are in increasing order, the answer is correct.

from collections import deque
import heapq

def deckRevealedIncreasing(deck):
    deck.sort()  
    queue = deque(range(len(deck)))  
    
    result = [0] * len(deck)
    for card in deck:
        result[queue.popleft()] = card  
        if queue: 
            queue.append(queue.popleft())
    
    return result
deck = [1,1000]
ordering = deckRevealedIncreasing(deck)
print(ordering)
[1, 1000]
ðŸ’¡ **Question 7**
Design a queue that supports push and pop operations in the front, middle, and back.

Implement the FrontMiddleBack class:

FrontMiddleBack() Initializes the queue.
void pushFront(int val) Adds val to the front of the queue.
void pushMiddle(int val) Adds val to the middle of the queue.
void pushBack(int val) Adds val to the back of the queue.
int popFront() Removes the front element of the queue and returns it. If the queue is empty, return 1.
int popMiddle() Removes the middle element of the queue and returns it. If the queue is empty, return 1.
int popBack() Removes the back element of the queue and returns it. If the queue is empty, return 1.
Notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:

Pushing 6 into the middle of [1, 2, 3, 4, 5] results in [1, 2, 6, 3, 4, 5].
Popping the middle from [1, 2, 3, 4, 5, 6] returns 3 and results in [1, 2, 4, 5, 6].
Example 1:

Input:
["FrontMiddleBackQueue", "pushFront", "pushBack", "pushMiddle", "pushMiddle", "popFront", "popMiddle", "popMiddle", "popBack", "popFront"]
[[], [1], [2], [3], [4], [], [], [], [], []]
Output:
[null, null, null, null, null, 1, 3, 4, 2, -1]

Explanation:
FrontMiddleBackQueue q = new FrontMiddleBackQueue();
q.pushFront(1);   // [1]
q.pushBack(2);    // [1,2]
q.pushMiddle(3);  // [1,3, 2]
q.pushMiddle(4);  // [1,4, 3, 2]
q.popFront();     // return 1 -> [4, 3, 2]
q.popMiddle();    // return 3 -> [4, 2]
q.popMiddle();    // return 4 -> [2]
q.popBack();      // return 2 -> []
q.popFront();     // return -1 -> [] (The queue is empty)
class FrontMiddleBackQueue:
    def __init__(self):
        self.front = []
        self.back = []

    def pushFront(self, val):
        self.front.append(val)
        self.balance()

    def pushMiddle(self, val):
        n = len(self.front) + len(self.back)
        if n % 2 == 0:
            self.front.append(val)
        else:
            self.back.append(val)
        self.balance()

    def pushBack(self, val):
        self.back.append(val)
        self.balance()

    def popFront(self):
        if self.front:
            return self.front.pop(0)
        elif self.back:
            return self.back.pop(0)
        else:
            return -1

    def popMiddle(self):
        n = len(self.front) + len(self.back)
        if n == 0:
            return -1
        elif n % 2 == 0:
            return self.front.pop()
        else:
            return self.back.pop(0)

    def popBack(self):
        if self.back:
            return self.back.pop()
        elif self.front:
            return self.front.pop()
        else:
            return -1

    def balance(self):
        if len(self.front) > len(self.back) + 1:
            self.back.insert(0, self.front.pop())
        elif len(self.front) < len(self.back):
            self.front.append(self.back.pop(0))


queue = FrontMiddleBackQueue()
output = []

queue.pushFront(1)
output.append(None)

queue.pushBack(2)
output.append(None)

queue.pushMiddle(3)
output.append(None)

queue.pushMiddle(4)
output.append(None)

output.append(queue.popFront())

output.append(queue.popMiddle())

output.append(queue.popMiddle())

output.append(queue.popBack())

output.append(queue.popFront())

print(output)
[None, None, None, None, 1, 2, 3, 4, -1]
ðŸ’¡ **Question 8**
For a stream of integers, implement a data structure that checks if the last k integers parsed in the stream are equal to value.

Implement the DataStream class:

DataStream(int value, int k) Initializes the object with an empty integer stream and the two integers value and k.
boolean consec(int num) Adds num to the stream of integers. Returns true if the last k integers are equal to value, and false otherwise. If there are less than k integers, the condition does not hold true, so returns false.
Example 1:

Input
["DataStream", "consec", "consec", "consec", "consec"]
[[4, 3], [4], [4], [4], [3]]
Output
[null, false, false, true, false]

Explanation
DataStream dataStream = new DataStream(4, 3); //value = 4, k = 3
dataStream.consec(4); // Only 1 integer is parsed, so returns False.
dataStream.consec(4); // Only 2 integers are parsed.
                      // Since 2 is less than k, returns False.
dataStream.consec(4); // The 3 integers parsed are all equal to value, so returns True.
dataStream.consec(3); // The last k integers parsed in the stream are [4,4,3].
                      // Since 3 is not equal to value, it returns False.
class DataStream:
    def __init__(self, value, k):
        self.stream = []
        self.value = value
        self.k = k

    def consec(self, num):
        self.stream.append(num)
        if len(self.stream) >= self.k:
            return self.stream[-self.k:] == [self.value] * self.k
        else:
            return False


data_stream = DataStream(4, 3)
output = []

output.append(None)

output.append(data_stream.consec(4))

output.append(data_stream.consec(4))

output.append(data_stream.consec(4))

output.append(data_stream.consec(3))

print(output)
[None, False, False, True, False]
