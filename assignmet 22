ðŸ’¡ Question-1:

Given a Binary Tree (Bt), convert it to a Doubly Linked List(DLL). The left and right pointers in nodes are to be used as previous and next pointers respectively in converted DLL. The order of nodes in DLL must be the same as in Inorder for the given Binary Tree. The first node of Inorder traversal (leftmost node in BT) must be the head node of the DLL.

image-2.png

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


def binaryTreeToDLL(root):
    global prev

    if root is None:
        return None

    head = binaryTreeToDLL(root.left)

    if prev is None:
        head = root
    else:
        root.left = prev
        prev.right = root

    prev = root

    binaryTreeToDLL(root.right)

    return head
# Test the implementation
# Create a binary tree
#       4
#     /   \
#    2     5
#   / \
#  1   3
root = Node(4)
root.left = Node(2)
root.right = Node(5)
root.left.left = Node(1)
root.left.right = Node(3)

# Convert the binary tree to DLL
prev = None  # Global variable to store previously visited node
dll_head = binaryTreeToDLL(root)

# Print the DLL
current = dll_head
while current is not None:
    print(current.data, end=" ")
    current = current.right
1 2 3 4 5 
ðŸ’¡ Question-2

A Given a binary tree, the task is to flip the binary tree towards the right direction that is clockwise. See the below examples to see the transformation.

In the flip operation, the leftmost node becomes the root of the flipped tree and its parent becomes its right child and the right sibling becomes its left child and the same should be done for all left most nodes recursively. image.png

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


def flipBinaryTree(root):
    if root is None or (root.left is None and root.right is None):
        return root

    flipped_left = flipBinaryTree(root.left)

    temp = root.left
    root.left = root.right
    root.right = temp

    return flipped_left


def printBinaryTree(root):
    if root is None:
        return

    print(root.data, end=" ")
    printBinaryTree(root.left)
    printBinaryTree(root.right)


# Test the implementation
# Create a binary tree
#         1
#        / \
#       2   3
#      / \
#     4   5
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)

# Flip the binary tree
flipped_root = flipBinaryTree(root)

# Print the flipped binary tree
printBinaryTree(flipped_root)
4 
ðŸ’¡ Question-3:

Given a binary tree, print all its root-to-leaf paths without using recursion. For example, consider the following Binary Tree.

Input:

    6
 /    \
3      5
/ \
2 5 4 /
7 4

Output:

There are 4 leaves, hence 4 root to leaf paths - 6->3->2 6->3->5->7 6->3->5->4 6->5>4

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


def printRootToLeafPaths(root):
    if root is None:
        return

    stack = [(root, "")]
    while stack:
        node, path = stack.pop()

        if node.left is None and node.right is None:
            print(path + str(node.data))

        if node.right is not None:
            stack.append((node.right, path + "->" + str(node.right.data)))

        if node.left is not None:
            stack.append((node.left, path + "->" + str(node.left.data)))


# Test the implementation
# Create the binary tree
#         6
#      /     \
#     3       5
#    / \       \
#   2   5       4
#       / \
#      7   4
root = Node(6)
root.left = Node(3)
root.right = Node(5)
root.left.left = Node(2)
root.left.right = Node(5)
root.left.right.left = Node(7)
root.left.right.right = Node(4)

# Print all the root-to-leaf paths
printRootToLeafPaths(root)
->3->22
->3->5->77
->3->5->44
->55
 
ðŸ’¡ Question-4:
Given Preorder, Inorder and Postorder traversals of some tree. Write a program to check if they all are of the same tree.

Examples:

Input :

    Inorder -> 4 2 5 1 3
    Preorder -> 1 2 4 5 3
    Postorder -> 4 5 2 3 1
Output :

Yes Explanation :

All of the above three traversals are of the same tree

                       1
                     /   \
                    2     3
                  /   \
                 4     5

Input :

    Inorder -> 4 2 5 1 3
    Preorder -> 1 5 4 2 3
    Postorder -> 4 1 2 3 5
Output :

No

def areTraversalsSame(preorder, inorder, postorder):
    if not preorder or not inorder or not postorder:
        return True

    if len(preorder) != len(inorder) or len(inorder) != len(postorder):
        return False

    if len(preorder) == 1:
        return preorder[0] == inorder[0] == postorder[0]

    if preorder[0] != postorder[-1]:
        return False

    root = preorder[0]
    idx = inorder.index(root)

    left_preorder = preorder[1:idx+1]
    left_inorder = inorder[:idx]
    left_postorder = postorder[:idx]

    right_preorder = preorder[idx+1:]
    right_inorder = inorder[idx+1:]
    right_postorder = postorder[idx:-1]

    return areTraversalsSame(left_preorder, left_inorder, left_postorder) and \
           areTraversalsSame(right_preorder, right_inorder, right_postorder)


# Test the implementation
preorder = [1, 2, 4, 5, 3]
inorder = [4, 2, 5, 1, 3]
postorder = [4, 5, 2, 3, 1]
print(areTraversalsSame(preorder, inorder, postorder))  # True

preorder = [1, 2, 4, 5, 3]
inorder = [4, 2, 8, 1, 3]
postorder = [4, 8, 2, 3, 1]
print(areTraversalsSame(preorder, inorder, postorder))  # False
True
False
 
