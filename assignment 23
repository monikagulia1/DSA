ðŸ’¡ Question-1:

Given preorder of a binary tree, calculate its depth(or height) [starting from depth 0]. The preorder is given as a string with two possible characters.

â€˜lâ€™ denotes the leaf
â€˜nâ€™ denotes internal node
The given tree can be seen as a full binary tree where every node has 0 or two children. The two children of a node can â€˜nâ€™ or â€˜lâ€™ or mix of both.

def calculate_depth(preorder):
    if not preorder:
        return -1  # Empty tree has a depth of -1

    # Recursive function to calculate depth
    def calculate_depth_recursive(preorder, index):
        if index >= len(preorder):
            return -1  # Out of bounds, return -1

        if preorder[index] == 'l':
            return 0  # Leaf node has a depth of 0

        # Internal node, recursively calculate depth for its children
        left_depth = calculate_depth_recursive(preorder, index + 1)
        right_depth = calculate_depth_recursive(preorder, index + 2 + left_depth)  # Skip left subtree
        return 1 + max(left_depth, right_depth)

    return calculate_depth_recursive(preorder, 0)
preorder = 'nnlllnll'
depth = calculate_depth(preorder)
print(f"The depth of the binary tree is: {depth}")
The depth of the binary tree is: 2
ðŸ’¡ Question-2:

Given a Binary tree, the task is to print the left view of the Binary Tree. The left view of a Binary Tree is a set of leftmost nodes for every level.

Examples:

*Input:*

        4

      /   \

    5     2

         /   \

        3     1

       /  \

      6    7

*Output: 4 5 3 6*

# Binary tree node definition
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def left_view(root):
    if not root:
        return

    # Helper function for DFS traversal
    def left_view_dfs(node, level, max_level):
        if not node:
            return

        # If this is the first node of the current level, print it
        if level > max_level[0]:
            print(node.data, end=' ')
            max_level[0] = level

        # Traverse the left and right subtrees recursively
        left_view_dfs(node.left, level + 1, max_level)
        left_view_dfs(node.right, level + 1, max_level)

    max_level = [0]  # Variable to keep track of the maximum level seen so far
    left_view_dfs(root, 1, max_level)

# Test the implementation
# Create the binary tree
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.right = Node(4)
root.right.left = Node(5)
root.right.right = Node(6)

# Print the left view of the binary tree
print("Left view of the binary tree: ")
left_view(root)
Left view of the binary tree: 
1 2 4 
ðŸ’¡ Question-3:
Given a Binary Tree, print the Right view of it.

The right view of a Binary Tree is a set of nodes visible when the tree is visited from the Right side.

Examples:

Input:

     1

  /     \

2        3

/   \       /  \

4     5   6    7

         \

           8

Output:

Right view of the tree is 1 3 7 8

Input:

     1

   /

8

/

7

Output:

Right view of the tree is 1 8 7

# Binary tree node definition
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def right_view(root):
    if not root:
        return

    # Helper function for DFS traversal
    def right_view_dfs(node, level, max_level):
        if not node:
            return

        # If this is the first node of the current level, print it
        if level > max_level[0]:
            print(node.data, end=' ')
            max_level[0] = level

        # Traverse the right and left subtrees recursively
        right_view_dfs(node.right, level + 1, max_level)
        right_view_dfs(node.left, level + 1, max_level)

    max_level = [0]  # Variable to keep track of the maximum level seen so far
    right_view_dfs(root, 1, max_level)

# Test the implementation
# Create the binary tree
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(6)

# Print the right view of the binary tree
print("Right view of the binary tree: ")
right_view(root)
Right view of the binary tree: 
1 3 6 
ðŸ’¡ Question-4:

Given a Binary Tree, The task is to print the bottom view from left to right. A node x is there in output if x is the bottommost node at its horizontal distance. The horizontal distance of the left child of a node x is equal to a horizontal distance of x minus 1, and that of a right child is the horizontal distance of x plus 1.

Examples:

Input:

         20

       /     \

    8         22

/      \         \

5         3        25

    /    \

10       14

Output: 5, 10, 3, 14, 25.

Input:

         20

       /     \

    8         22

/      \      /   \

5         3   4     25

     /    \

 10       14

Output:

5 10 4 14 25.

Explanation:

If there are multiple bottom-most nodes for a horizontal distance from the root, then print the later one in the level traversal.

3 and 4 are both the bottom-most nodes at a horizontal distance of 0, we need to print 4.

# Binary tree node definition
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
        self.hd = 0  # Horizontal distance

def bottom_view(root):
    if not root:
        return

    # Dictionary to store the horizontal distance and bottommost node at each level
    hd_map = {}

    # Queue for BFS traversal
    queue = []

    # Enqueue the root node with horizontal distance 0
    queue.append((root, 0))

    while queue:
        node, hd = queue.pop(0)

        # Update the horizontal distance in the node
        node.hd = hd

        # Update the bottom view dictionary with the current node at its horizontal distance
        hd_map[hd] = node.data

        # Enqueue the left child with horizontal distance hd-1
        if node.left:
            queue.append((node.left, hd - 1))

        # Enqueue the right child with horizontal distance hd+1
        if node.right:
            queue.append((node.right, hd + 1))

    # Print the bottom view from left to right
    for key in sorted(hd_map):
        print(hd_map[key], end=' ')

# Test the implementation
# Create the binary tree
root = Node(20)
root.left = Node(8)
root.right = Node(22)
root.left.left = Node(5)
root.left.right = Node(3)
root.right.left = Node(4)
root.right.right = Node(25)
root.left.right.left = Node(10)
root.left.right.right = Node(14)

# Print the bottom view of the binary tree
print("Bottom view of the binary tree:")
bottom_view(root)
Bottom view of the binary tree:
5 10 4 14 25 
 
