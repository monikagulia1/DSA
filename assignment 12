ðŸ’¡ **Question 1**
Given a singly linked list, delete middle of the linked list. For example, if given linked list is 1->2->3->4->5 then linked list should be modified to 1->2->4->5.If there are even nodes, then there would be two middle nodes, we need to delete the second middle element. For example, if given linked list is 1->2->3->4->5->6 then it should be modified to 1->2->3->5->6.If the input linked list is NULL or has 1 node, then it should return NULL

Example 1:
Input:
LinkedList: 1->2->3->4->5
Output:1 2 4 5

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def deleteMiddleNode(head):
    if not head or not head.next:
        return None

    slow = head
    fast = head
    prev = None

    while fast and fast.next:
        fast = fast.next.next
        prev = slow
        slow = slow.next

    prev.next = slow.next

    return head


head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)

head = deleteMiddleNode(head)


while head:
    print(head.val, end=" ")
    head = head.next
1 2 4 5 
ðŸ’¡ **Question 2**
Given a linked list of N nodes. The task is to check if the linked list has a loop. Linked list can contain self loop.

Example 1:

Input:
N = 3
value[] = {1,3,4}
x(position at which tail is connected) = 2
Output:True
Explanation:In above test case N = 3.
The linked list with nodes N = 3 is
given. Then value of x=2 is given which
means last node is connected with xth
node of linked list. Therefore, there
exists a loop.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def hasCycle(head):
    if not head or not head.next:
        return False

    slow = head
    fast = head.next

    while slow != fast:
        if not fast or not fast.next:
            return False
        slow = slow.next
        fast = fast.next.next

    return True

head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)
head.next.next.next.next.next = head.next.next

print(hasCycle(head)) 
True
ðŸ’¡ **Question 3**
Given a linked list consisting of L nodes and given a number N. The task is to find the Nth node from the end of the linked list.

Example 1:

Input:
N = 2
LinkedList: 1->2->3->4->5->6->7->8->9
Output:8
Explanation:In the first example, there
are 9 nodes in linked list and we need
to find 2nd node from end. 2nd node
from end is 8.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def findNthFromEnd(head, N):
    if not head:
        return None

    first = head
    second = head

    for _ in range(N):
        if not first:
            return None
        first = first.next

    while first:
        first = first.next
        second = second.next

    return second.val

head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)
head.next.next.next.next.next = ListNode(6)
head.next.next.next.next.next.next = ListNode(7)
head.next.next.next.next.next.next.next = ListNode(8)
head.next.next.next.next.next.next.next.next = ListNode(9)

N = 2
print(findNthFromEnd(head, N))  
8
ðŸ’¡ **Question 4**
Given a singly linked list of characters, write a function that returns true if the given list is a palindrome, else false. Examples:

Input: R->A->D->A->R->NULL

Output: Yes

Input: C->O->D->E->NULL

Output: No

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def isPalindrome(head):
    if not head or not head.next:
        return True

    slow = head
    fast = head

    # Find the middle of the linked list
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

    prev = None
    while slow:
        next_node = slow.next
        slow.next = prev
        prev = slow
        slow = next_node

    fast = head

    while prev:
        if fast.val != prev.val:
            return False
        fast = fast.next
        prev = prev.next

    return True
# Example 1: Palindrome linked list: A -> B -> C -> B -> A
head1 = ListNode('A')
head1.next = ListNode('B')
head1.next.next = ListNode('C')
head1.next.next.next = ListNode('B')
head1.next.next.next.next = ListNode('A')

print(isPalindrome(head1))  

# Example 2: Non-palindrome linked list: A -> B -> C -> D -> E
head2 = ListNode('A')
head2.next = ListNode('B')
head2.next.next = ListNode('C')
head2.next.next.next = ListNode('D')
head2.next.next.next.next = ListNode('E')

print(isPalindrome(head2))  
True
False
ðŸ’¡ **Question 5**
Given a linked list of N nodes such that it may contain a loop.

A loop here means that the last node of the link list is connected to the node at position X(1-based index). If the link list does not have any loop, X=0.

Remove the loop from the linked list, if it is present, i.e. unlink the last node which is forming the loop.

Example 1:

Input:
N = 3
value[] = {1,3,4}
X = 2
Output:1
Explanation:The link list looks like
1 -> 3 -> 4
     ^    |
     |____|
A loop is present. If you remove it
successfully, the answer will be 1.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def findRotationCount(head, X):
    if not head or not head.next:
        return 0

    slow = head
    fast = head
    count = 0

    while X > 0 and fast:
        fast = fast.next
        X -= 1

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        count += 1

        if slow == fast:
            return count

    return count + 1


head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = head.next 

X = 1 

rotation_count = findRotationCount(head, X)
print(rotation_count)
2
ðŸ’¡ **Question 6**
Given a linked list and two integers M and N. Traverse the linked list such that you retain M nodes then delete next N nodes, continue the same till end of the linked list.

Difficulty Level: Rookie

Examples:

Input:
M = 2, N = 2
Linked List: 1->2->3->4->5->6->7->8
Output:
Linked List: 1->2->5->6

Input:
M = 3, N = 2
Linked List: 1->2->3->4->5->6->7->8->9->10
Output:
Linked List: 1->2->3->6->7->8

Input:
M = 1, N = 1
Linked List: 1->2->3->4->5->6->7->8->9->10
Output:
Linked List: 1->3->5->7->9
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def retainAndDelete(head, M, N):
    if not head:
        return None

    current = head
    previous = None

    while current:
        for _ in range(M):
            if current:
                previous = current
                current = current.next
            else:
                break

        for _ in range(M - 1):
            if previous:
                previous = previous.next
            else:
                break


        for _ in range(N):
            if current:
                current = current.next
            else:
                break


        if previous:
            previous.next = current

    return head


head = ListNode(1)
current = head
for i in range(2, 11):
    current.next = ListNode(i)
    current = current.next

M = 2
N = 3

new_head = retainAndDelete(head, M, N)


current = new_head
while current:
    print(current.val, end=" ")
    current = current.next
1 2 3 6 7 8 
ðŸ’¡ **Question 7**
Given two linked lists, insert nodes of second list into first list at alternate positions of first list. For example, if first list is 5->7->17->13->11 and second is 12->10->2->4->6, the first list should become 5->12->7->10->17->2->13->4->11->6 and second list should become empty. The nodes of second list should only be inserted when there are positions available. For example, if the first list is 1->2->3 and second list is 4->5->6->7->8, then first list should become 1->4->2->5->3->6 and second list to 7->8.

Use of extra space is not allowed (Not allowed to create additional nodes), i.e., insertion must be done in-place. Expected time complexity is O(n) where n is number of nodes in first list.

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def mergeLists(first, second):
    if not first:
        return second

    if not second:
        return first

    while first and second:
        second_next = second.next
        second.next = first.next
        first.next = second
        first = first.next.next
        second = second_next

    if second:
        first.next = second

    return first


first_head = ListNode(5)
first_head.next = ListNode(7)
first_head.next.next = ListNode(17)
first_head.next.next.next = ListNode(13)
first_head.next.next.next.next = ListNode(11)

second_head = ListNode(12)
second_head.next = ListNode(10)
second_head.next.next = ListNode(2)
second_head.next.next.next = ListNode(4)
second_head.next.next.next.next = ListNode(6)


merged_head = mergeLists(first_head, second_head)


current = merged_head
while current:
    print(current.val, end=" ")
    current = current.next


current = second_head
while current:
    print(current.val, end=" ")
    current = current.next
12 7 10 17 2 13 4 11 6 
ðŸ’¡ **uestion 8**
Given a singly linked list, find if the linked list is circular or not.

A linked list is called circular if it is not NULL-terminated and all nodes are connected in the form of a cycle. Below is an example of a circular linked list.

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def isCircular(head):
    if not head:
        return False

    slow = head
    fast = head.next

    while fast and fast.next:
        if slow == fast:
            return True

        slow = slow.next
        fast = fast.next.next

    return False

head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)
head.next.next.next.next.next = head.next

print(isCircular(head))  
True
