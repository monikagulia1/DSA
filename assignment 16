ðŸ’¡ **Question 1**
Given an array, for each element find the value of the nearest element to the right which is having a frequency greater than that of the current element. If there does not exist an answer for a position, then make the value â€˜-1â€™.

Examples:

Input: a[] = [1, 1, 2, 3, 4, 2, 1]
Output : [-1, -1, 1, 2, 2, 1, -1]

Explanation:
Given array a[] = [1, 1, 2, 3, 4, 2, 1]
Frequency of each element is: 3, 3, 2, 1, 1, 2, 3

Lets calls Next Greater Frequency element as NGF
1. For element a[0] = 1 which has a frequency = 3,
   As it has frequency of 3 and no other next element
   has frequency more than 3 so  '-1'
2. For element a[1] = 1 it will be -1 same logic
   like a[0]
3. For element a[2] = 2 which has frequency = 2,
   NGF element is 1 at position = 6  with frequency
   of 3 > 2
4. For element a[3] = 3 which has frequency = 1,
   NGF element is 2 at position = 5 with frequency
   of 2 > 1
5. For element a[4] = 4 which has frequency = 1,
   NGF element is 2 at position = 5 with frequency
   of 2 > 1
6. For element a[5] = 2 which has frequency = 2,
   NGF element is 1 at position = 6 with frequency
   of 3 > 2
7. For element a[6] = 1 there is no element to its
   right, hence -1
Input : a[] = [1, 1, 1, 2, 2, 2, 2, 11, 3, 3]
Output : [2, 2, 2, -1, -1, -1, -1, 3, -1, -1]
def find_nearest_greater_frequency(arr):
    n = len(arr)
    frequency = {}
    stack = []
    result = []

  
    for i in range(n - 1, -1, -1):
        if arr[i] in frequency:
            frequency[arr[i]] += 1
        else:
            frequency[arr[i]] = 1

    
    for i in range(n - 1, -1, -1):
        while stack and frequency[arr[i]] >= frequency[stack[-1]]:
            stack.pop()

        if not stack:
            result.append(-1)
        else:
            result.append(stack[-1])

        stack.append(arr[i])

    result.reverse()

    for i in range(n):
        if arr[i] not in frequency:
            result[i] = -1

    return result
arr = [1, 1, 2, 3, 4, 2, 1]
output = find_nearest_greater_frequency(arr)
print(output)
[-1, -1, 1, 2, 2, 1, -1]
ðŸ’¡ **Question 2**
Given a stack of integers, sort it in ascending order using another temporary stack.

Examples:

Input : [34, 3, 31, 98, 92, 23]
Output : [3, 23, 31, 34, 92, 98]

Input : [3, 5, 1, 4, 2, 8]
Output : [1, 2, 3, 4, 5, 8]
def sort_stack(stack):
    temp_stack = []

    while stack:
        temp = stack.pop()

        while temp_stack and temp_stack[-1] > temp:
            stack.append(temp_stack.pop())

        temp_stack.append(temp)

    return temp_stack[::-1]
stack1 = [34, 3, 31, 98, 92, 23]
output1 = sort_stack(stack1)
print(output1) 
[98, 92, 34, 31, 23, 3]
ðŸ’¡ **Question 3**
Given a stack with push(), pop(), and empty() operations, The task is to delete the middle element ****of it without using any additional data structure.

Input  : Stack[] = [1, 2, 3, 4, 5]

Output : Stack[] = [1, 2, 4, 5]

Input  : Stack[] = [1, 2, 3, 4, 5, 6]

Output : Stack[] = [1, 2, 4, 5, 6]
def delete_middle_element(stack, middle):
    if middle == 1:
        stack.pop()
        return

    temp = stack.pop()
    delete_middle_element(stack, middle - 1)
    stack.append(temp)


def delete_middle(stack):
    length = len(stack)
    middle = length // 2 + 1
    delete_middle_element(stack, middle)


stack1 = [1, 2, 3, 4, 5]
delete_middle(stack1)
print(stack1) 
[1, 2, 4, 5]
ðŸ’¡ **Question 4**
Given a Queue consisting of first n natural numbers (in random order). The task is to check whether the given Queue elements can be arranged in increasing order in another Queue using a stack. The operation allowed are:

Push and pop elements from the stack
Pop (Or Dequeue) from the given Queue.
Push (Or Enqueue) in the another Queue.
Examples :

Input : Queue[] = { 5, 1, 2, 3, 4 }

Output : Yes

Pop the first element of the given Queue

i.e 5. Push 5 into the stack.

Now, pop all the elements of the given Queue and push them to second Queue.

Now, pop element 5 in the stack and push it to the second Queue.

Input : Queue[] = { 5, 1, 2, 6, 3, 4 }

Output : No

Push 5 to stack.

Pop 1, 2 from given Queue and push it to another Queue.

Pop 6 from given Queue and push to stack.

Pop 3, 4 from given Queue and push to second Queue.

Now, from using any of above operation, we cannot push 5 into the second Queue because it is below the 6 in the stack.

def check_arrangement(queue):
    stack = []
    second_queue = []

    expected_number = 1
    while queue:
        current_element = queue.pop(0)

        if current_element == expected_number:
            second_queue.append(current_element)
            expected_number += 1
        elif not stack or stack[-1] > current_element:
            stack.append(current_element)
        else:
            return "No"

    while stack:
        element = stack.pop()
        second_queue.append(element)

    return "Yes" if second_queue == sorted(second_queue) else "No"



queue1 = [5, 1, 2, 3, 4]
print(check_arrangement(queue1)) 
Yes
ðŸ’¡ **Question 5**
Given a number , write a program to reverse this number using stack.

Examples:

Input : 365
Output : 563

Input : 6899
Output : 9986
def reverse_number(num):
    num_str = str(num)
    stack = []

    
    for char in num_str:
        stack.append(char)

    reversed_str = ""

   
    while stack:
        reversed_str += stack.pop()

    reversed_num = int(reversed_str)
    return reversed_num



num1 = 365
print(reverse_number(num1))  
563
ðŸ’¡ **Question 6**
Given an integer k and a queue of integers, The task is to reverse the order of the first k elements of the queue, leaving the other elements in the same relative order.

Only following standard operations are allowed on queue.

enqueue(x) : Add an item x to rear of queue
dequeue() : Remove an item from front of queue
size() : Returns number of elements in queue.
front() : Finds front item.
from queue import Queue

def reverse_k_elements(queue, k):
    stack = []
    
    for _ in range(k):
        stack.append(queue.get())

    temp_queue = Queue()
    
    while stack:
        temp_queue.put(stack.pop())
    
    while not queue.empty():
        temp_queue.put(queue.get())
    
    return temp_queue


queue = Queue()
queue.put(1)
queue.put(2)
queue.put(3)
queue.put(4)
queue.put(5)

k = 3

reversed_queue = reverse_k_elements(queue, k)

while not reversed_queue.empty():
    print(reversed_queue.get(), end=' ')
3 2 1 4 5 
ðŸ’¡ **Question 7**
Given a sequence of n strings, the task is to check if any two similar words come together and then destroy each other then print the number of words left in the sequence after this pairwise destruction.

Examples:

Input : ab aa aa bcd ab

Output : 3

*As aa, aa destroys each other so,*

*ab bcd ab is the new sequence.*

Input :  tom jerry jerry tom

Output : 0

*As first both jerry will destroy each other.*

*Then sequence will be tom, tom they will also destroy*

*each other. So, the final sequence doesnâ€™t contain any*

*word.*
def count_words_left(sequence):
    stack = []

    for word in sequence:
        if not stack or word != stack[-1]:
            stack.append(word)
        else:
            stack.pop()

    return len(stack)



sequence = ['ab', 'aa', 'aa', 'bcd', 'ab']
result = count_words_left(sequence)
print("Number of words left:", result)
Number of words left: 3
ðŸ’¡ **Question 8**
Given an array of integers, the task is to find the maximum absolute difference between the nearest left and the right smaller element of every element in the array.

Note: If there is no smaller element on right side or left side of any element then we take zero as the smaller element. For example for the leftmost element, the nearest smaller element on the left side is considered as 0. Similarly, for rightmost elements, the smaller element on the right side is considered as 0.

Examples:

Input : arr[] = {2, 1, 8}
Output : 1
Left smaller  LS[] {0, 0, 1}
Right smaller RS[] {1, 0, 0}
Maximum Diff of abs(LS[i] - RS[i]) = 1

Input  : arr[] = {2, 4, 8, 7, 7, 9, 3}
Output : 4
Left smaller   LS[] = {0, 2, 4, 4, 4, 7, 2}
Right smaller  RS[] = {0, 3, 7, 3, 3, 3, 0}
Maximum Diff of abs(LS[i] - RS[i]) = 7 - 3 = 4

Input : arr[] = {5, 1, 9, 2, 5, 1, 7}
Output : 1
def max_absolute_difference(arr):
    n = len(arr)
    left_stack = []
    right_stack = []
    left_smaller = [0] * n
    right_smaller = [0] * n

    for i in range(n):
        while right_stack and arr[i] < arr[right_stack[-1]]:
            right_smaller[right_stack.pop()] = arr[i]
        right_stack.append(i)

    for i in range(n - 1, -1, -1):
        while left_stack and arr[i] <= arr[left_stack[-1]]:
            left_smaller[left_stack.pop()] = arr[i]
        left_stack.append(i)

    max_diff = 0
    for i in range(n):
        diff = abs(left_smaller[i] - right_smaller[i])
        max_diff = max(max_diff, diff)

    return max_diff



arr = [2, 1, 8]
result = max_absolute_difference(arr)
print("Maximum absolute difference:", result)
Maximum absolute difference: 1
