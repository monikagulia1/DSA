ðŸ’¡ **Question 8**

You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.

</aside>
solution-
To check if the given points in the `coordinates` array make a straight line in the XY plane, we can compare the slopes between consecutive points. If all the slopes are the same, the points lie on a straight line.

Here's an example implementation in Python:

```python
def check_straight_line(coordinates):
    if len(coordinates) <= 2:
        return True

    x0, y0 = coordinates[0]
    x1, y1 = coordinates[1]

    for i in range(2, len(coordinates)):
        x, y = coordinates[i]
        if (x1 - x0) * (y - y1) != (x - x1) * (y1 - y0):
            return False

    return True
```

Let's test this implementation with an example:

```python
coordinates = [[1, 2], [2, 3], [3, 4], [4, 5]]
result = check_straight_line(coordinates)
print(result)
```

Output:
```
True
```

In this example, the points `[1, 2], [2, 3], [3, 4], [4, 5]` form a straight line in the XY plane. The algorithm correctly returns `True` to indicate that the points make a straight line.
<aside>
ðŸ’¡ **Question 2**

Given a string s containing only three types of characters: '(', ')' and '*', return true *if* s *is **valid***.

</aside>
solution-
To determine if a string `s` containing only three types of characters ('(', ')', and '*') is valid, we can use a stack to keep track of the opening parentheses '(' and the asterisks '*'. 

Here's an example implementation in Python:

```python
def check_valid_string(s):
    stack = []
    asterisks = []

    for i, char in enumerate(s):
        if char == '(':
            stack.append(i)
        elif char == '*':
            asterisks.append(i)
        else:
            if stack:
                stack.pop()
            elif asterisks:
                asterisks.pop()
            else:
                return False

    while stack and asterisks:
        if stack[-1] > asterisks[-1]:
            return False
        stack.pop()
        asterisks.pop()

    return len(stack) == 0
```

Let's test this implementation with an example:

```python
s = "(*))"
result = check_valid_string(s)
print(result)
```

Output:
```
True
```

In this example, the string `s` is "(*))". The algorithm determines that `s` is valid because the parentheses and asterisks can be balanced to form a valid expression. Therefore, the algorithm correctly returns `True`.
<aside>
ðŸ’¡ **Question 3**

Given two strings word1 and word2, return *the minimum number of **steps** required to make* word1 *and* word2 *the same*.

In one **step**, you can delete exactly one character in either string

</aside>
solution-
To find the minimum number of steps required to make two strings `word1` and `word2` the same, we can use dynamic programming to find the length of the longest common subsequence (LCS) between the two strings. 

The minimum number of steps is then the sum of the lengths of `word1` and `word2` minus twice the length of the LCS. This is because each character in the LCS does not need to be deleted, so we subtract twice the length of the LCS to account for the characters that need to be deleted.

Here's an example implementation in Python:

```python
def min_steps_to_same(word1, word2):
    m, n = len(word1), len(word2)
    dp = [[0] * (n+1) for _ in range(m+1)]

    # Fill in the dynamic programming table
    for i in range(1, m+1):
        for j in range(1, n+1):
            if word1[i-1] == word2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])

    lcs_length = dp[m][n]
    min_steps = m + n - 2 * lcs_length

    return min_steps
```

Let's test this implementation with an example:

```python
word1 = "sea"
word2 = "eat"
result = min_steps_to_same(word1, word2)
print(result)
```

Output:
```
2
```

In this example, the minimum number of steps required to make the strings `word1` and `word2` the same is 2. We can delete the characters 's' and 't' to make the strings equal. Therefore, the algorithm correctly returns `2` as the minimum number of steps.
<aside>
ðŸ’¡ **Question 4**

You need to construct a binary tree from a string consisting of parenthesis and integers.

The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.
You always start to construct the **left** child node of the parent first if it exists

</aside>
solution-
To construct a binary tree from a string representation consisting of parentheses and integers, we can use a recursive approach.

Here's an example implementation in Python:

```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def str2tree(s):
    if not s:
        return None

    # Find the index of the first parenthesis
    i = s.find('(')

    if i == -1:
        # No child nodes, the entire string represents the root node value
        return TreeNode(int(s))

    # Create the root node with its value
    root = TreeNode(int(s[:i]))

    # Find the index of the matching closing parenthesis
    count = 0
    j = i
    while j < len(s):
        if s[j] == '(':
            count += 1
        elif s[j] == ')':
            count -= 1

        if count == 0:
            break

        j += 1

    # Recursive calls to construct the left and right subtrees
    root.left = str2tree(s[i+1:j])
    root.right = str2tree(s[j+2:-1])

    return root
```

Let's test this implementation with an example:

```python
s = "4(2(3)(1))(6(5))"
root = str2tree(s)

# Helper function to print the tree in a readable format
def print_tree(node):
    if node:
        print(node.val, end=' ')
        print_tree(node.left)
        print_tree(node.right)

print_tree(root)
```

Output:
```
4 2 3 1 6 5
```

In this example, the input string `s` represents the binary tree `4(2(3)(1))(6(5))`. The algorithm constructs the binary tree based on the string representation. The tree is then printed in a readable format, resulting in `4 2 3 1 6 5`. Therefore, the algorithm correctly constructs the binary tree from the string representation.
<aside>
ðŸ’¡ **Question 5**

Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of **consecutive repeating characters** in chars:

- If the group's length is 1, append the character to s.
- Otherwise, append the character followed by the group's length.

The compressed string s **should not be returned separately**, but instead, be stored **in the input character array chars**. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done **modifying the input array,** return *the new length of the array*.

You must write an algorithm that uses only constant extra space.

**Example 1:**

**Input:** chars = ["a","a","b","b","c","c","c"]

**Output:** Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]

**Explanation:**

The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".

</aside>

To compress an array of characters `chars` using the specified algorithm, we can iterate through the array and maintain pointers to track the current character and the position where the compressed characters should be placed.

Here's an example implementation in Python:

```python
def compress(chars):
    n = len(chars)
    write = 0
    count = 1

    for i in range(1, n + 1):
        if i < n and chars[i] == chars[i - 1]:
            count += 1
        else:
            chars[write] = chars[i - 1]
            write += 1

            if count > 1:
                count_str = str(count)
                for digit in count_str:
                    chars[write] = digit
                    write += 1

            count = 1

    return write
```

Let's test this implementation with an example:

```python
chars = ['a', 'a', 'b', 'b', 'c', 'c', 'c']
length = compress(chars)
print(length)
print(chars[:length])
```

Output:
```
6
['a', '2', 'b', '2', 'c', '3']
```

In this example, the array `chars` contains consecutive repeating characters. The algorithm compresses the array according to the specified algorithm. The new length of the array is 6, and the compressed characters are `['a', '2', 'b', '2', 'c', '3']`. Therefore, the algorithm correctly compresses the array and returns the new length.
<aside>
ðŸ’¡ **Question 6**

Given two strings s and p, return *an array of all the start indices of* p*'s anagrams in* s. You may return the answer in **any order**.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

</aside>
solution-
To find all the start indices of `p`'s anagrams in string `s`, we can use the sliding window technique. 

Here's an example implementation in Python:

```python
from collections import Counter

def find_anagrams(s, p):
    n = len(s)
    m = len(p)
    p_count = Counter(p)
    window_count = Counter()

    indices = []

    for i in range(n):
        window_count[s[i]] += 1

        if i >= m:
            if window_count[s[i - m]] == 1:
                del window_count[s[i - m]]
            else:
                window_count[s[i - m]] -= 1

        if window_count == p_count:
            indices.append(i - m + 1)

    return indices
```

Let's test this implementation with an example:

```python
s = "cbaebabacd"
p = "abc"
result = find_anagrams(s, p)
print(result)
```

Output:
```
[0, 6]
```

In this example, the string `s` is "cbaebabacd" and the string `p` is "abc". The algorithm finds all the start indices of `p`'s anagrams in `s`, which are `[0, 6]`. Therefore, the algorithm correctly returns the indices of the anagrams.
<aside>
ðŸ’¡ **Question 7**

Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.

</aside>
solution-
To decode an encoded string according to the given encoding rule, we can use a stack to keep track of the encoded parts of the string. We iterate through the characters of the input string and perform the following operations:

1. If the character is a digit, we push it onto the stack.
2. If the character is '[', we push the current decoded string onto the stack and start a new decoded string.
3. If the character is ']', we pop the last decoded string from the stack and the previous count from the stack. We multiply the decoded string by the count and append it to the previous decoded string.
4. If the character is a letter, we append it to the current decoded string.

Here's an example implementation in Python:

```python
def decode_string(s):
    stack = []
    current_decoded = ""
    count = 0

    for char in s:
        if char.isdigit():
            count = count * 10 + int(char)
        elif char == '[':
            stack.append(current_decoded)
            stack.append(count)
            current_decoded = ""
            count = 0
        elif char == ']':
            prev_count = stack.pop()
            prev_decoded = stack.pop()
            current_decoded = prev_decoded + prev_count * current_decoded
        else:
            current_decoded += char

    return current_decoded
```

Let's test this implementation with an example:

```python
s = "3[a]2[bc]"
result = decode_string(s)
print(result)
```

Output:
```
"aaabcbc"
```

In this example, the encoded string is "3[a]2[bc]". The algorithm decodes the string to "aaabcbc" based on the encoding rule. Therefore, the algorithm correctly returns the decoded string.
<aside>
ðŸ’¡ **Question 8**

Given two strings s and goal, return true *if you can swap two letters in* s *so the result is equal to* goal*, otherwise, return* false*.*

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

- For example, swapping at indices 0 and 2 in "abcd" results in "cbad".
</aside>
solution-
To determine if two strings `s` and `goal` can be made equal by swapping two letters, we need to check if there are exactly two positions where the characters differ between `s` and `goal`.

Here's an example implementation in Python:

```python
def buddy_strings(s, goal):
    if len(s) != len(goal):
        return False

    if s == goal:
        # Check if there are at least two identical characters in s
        return len(set(s)) < len(s)

    diff_positions = []
    for i in range(len(s)):
        if s[i] != goal[i]:
            diff_positions.append(i)

        if len(diff_positions) > 2:
            return False

    return len(diff_positions) == 2 and s[diff_positions[0]] == goal[diff_positions[1]] and s[diff_positions[1]] == goal[diff_positions[0]]
```

Let's test this implementation with an example:

```python
s = "ab"
goal = "ba"
result = buddy_strings(s, goal)
print(result)
```

Output:
```
True
```

In this example, the strings `s` and `goal` can be made equal by swapping the characters at indices 0 and 1. The algorithm correctly returns `True` to indicate that the strings can be made equal by swapping two letters.
